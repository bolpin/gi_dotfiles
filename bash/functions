

# unipsorkal startup (run from a tmux session)
function uv { 
  tmux rename-session -s unisporkal
  tmux new-window -n unisporkal
  tmux send-keys 'u;cd search; rails s -p 5000' 'C-m'

  tmux split-window -h -p 50
  tmux send-keys 'u;cd asset_detail;rails s -p 4000' 'C-m'

  tmux split-window -v -p 50
  tmux send-keys 'u;cd sign_in;rails s -p 2000' 'C-m'
}

# Show most used commands in history:
function common_commands {
  history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -n 10
}

function common_git_commands {
  history | grep git | ruby -ane 'puts $F.drop(1).join(" ")'| awk '{a[$0]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -n 10
  # history | grep git | ruby -ane 'puts $F.drop(1).join(" ")'| ruby -e '$a = Hash.new(0); while gets; $a[$_] += 1 ;end; $a.each{|k,v| puts v.to_s + " " + k}' | sort -rn | head -n 10
}

# Creating a remote tracking branch
function gbt { 
  #git branch --track $2 $1/$2
  #git checkout $2
  git branch --track $1 "origin/$1"
  git checkout $1
}

function git-new-remote-tracking {
  git checkout -b $1 && git push -u origin $1
}


function take () { mkdir -p "$@" && eval cd "\"\$$#\""; }

# Allows commit message without typing quotes (can't have quotes in the commit msg though).
function gc {
  git commit -m "$*"
}



function rmf(){
  for file in $*
  do
    __rm_single_file $file
  done
}

function __rm_single_file(){
  if ! [ -d ~/.Trash/ ]
  then
    command /bin/mkdir ~/.Trash
  fi

  if ! [ $# -eq 1 ]
  then
    echo "__rm_single_file: 1 argument required but $# passed."
    exit
  fi

  if [ -e $1 ]
  then
    BASENAME=`basename $1`
    NAME=$BASENAME
    COUNT=0
    while [ -e ~/.Trash/$NAME ]
    do
      COUNT=$(($COUNT+1))
      NAME="$BASENAME.$COUNT"
    done

    command /bin/mv $1 ~/.Trash/$NAME
  else
    echo "No such file or directory: $file"
  fi
}


function remote_branch_info(){
  for k in `git branch -r | perl -pe 's/^..(.*?)( ->.*)?$/\1/'`
  do 
    echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr %Cred%an %Creset" $k -- | head -n 1`\\t$k 
  done | sort -r
}

# Switch to a gem directory, trying to match your name the best
function cdgem {
  gem_dir=`gem env | grep INSTALLATION | cut -d' ' -f6`
  cd $gem_dir/gems
  cd `ls|grep $1|sort|tail -1`
}

function sgi {
  sudo gem install $1
}

function sagi {
  sudo apt-get -y install $1 
}

function syi {
  sudo yum -y install $1
}

function glg { 
  gem list | grep $1
}


function rrg { 
  bundle exec rake routes | grep $1
}


#################
#   git stuff   #
#################
git_sha() {
  git rev-parse --short HEAD 2>/dev/null
}

function git_branch_name {
  val=`git branch 2>/dev/null | grep '^*' | colrm 1 2`
  echo "$val"
}

function git-done {
  branch=`git_branch_name`
  git checkout master && git merge $branch --ff-only && bundle install && rake db:migrate db:test:prepare && rake && git push && git branch -D $branch && git push origin :$branch
}


function git-on-master {
  branch=`git_branch_name`
  git checkout master && git pull --rebase 
  git checkout $branch
  git rebase master
}


function parse_git_branch {
  val=`git_branch_name | sed 's_\(.*\)_(\1)_'`
  echo "$val"
}

function git-new-remote-tracking {
  git checkout -b $1 && git push -u origin $1
}

function git_done {
  branch=`git_branch_name`
  git checkout master && git pull --rebase 
  git checkout $branch && git rebase master && git checkout master && git merge $branch && bundle install && bundle exec rake db:migrate && bundle exec rake && git push && git branch -d $branch && git push origin :$branch
}

function git_nuke {
  git branch -D $1 && git push origin :$1
}

# Creating a remote tracking branch
function track { 
  git branch --track $1 "origin/$1"
}

function g {
  if [[ $# > 0 ]]; then
    git "$@"
  else
    git status --short
  fi
}
# compdef g=git













# j () {
#   if [[ ${@} = -* ]]
#   then
#     autojump ${@}
#     return
#   fi
#   local new_path="$(autojump ${@})"
#   if [ -d "${new_path}" ]
#   then
#     echo -e "\\033[31m${new_path}\\033[0m"
#     cd "${new_path}"
#   else
#     echo "autojump: directory '${@}' not found"
#     echo "Try \`autojump --help\` for more information."
#     false
#   fi
# }
#
# alias gitprune='git remote prune origin'
# alias gitclean=_gitclean
#   _gitclean() {
#     while read line
#     do
#         echo $line
#     done <<< "`(git clean -xdf)`"
#   }
# alias email_recent=_email_recent
#   _email_recent() {
#     git log --pretty=format:"%ae" --since=$1.months | sort -k1 -u | sed ':a;N;$!ba;s/\n/; /g'
#   }
# alias current_branch='git rev-parse --abbrev-ref HEAD'
# alias anthill_current_branch=_anthill_current_branch
#   _anthill_current_branch() {
#      local branch=$(current_branch)
#      local workflowMatch=`ht workflow list $(current_project) --json | jq -r '.[].name' | grep "$branch"`
#      if [ -z "$workflowMatch" ]
#      then
#        branch="FeatureIntegration"
#      fi
#    echo "$branch"
#   }
#
# alias ffn=_ffn
#   _ffn() {
#     find . -name $1 -exec grep --with-filename $2 {} \;
#   }
# alias ffno=_ffno
#   _ffno() {
#     find . -name $1 -exec grep --files-with-matches $2 {} \;
#   }
# alias rm_orig='find . -name "*.orig" -exec rm -rf {} \;'
# alias proj-ref=_proj-ref
#    _proj-ref() {
#       local results=`find . -name *.csproj -exec grep --with-filename $1 {} \; | grep HintPath`
#     for r in $results; do
#         echo $r | sed 's/<HintPath>/   /' | sed 's/<\/HintPath>//'
#     done
#    }
#
# alias check_free=_check_free
#   _check_free() {
#     wmic //node:"$1" LogicalDisk Where DriveType="3" Get DeviceID,FreeSpace| grep -i "c:"
#   }
#
# alias splunk_check=_splunk_check
# _splunk_check() {
#    sc \\\\$1 query SplunkForwarder
# }
#
# alias splunk_restart=_splunk_restart
# _splunk_restart() {
#    sc \\\\$1 start SplunkForwarder
# }
#
# alias iplookup=_iplookup
# _iplookup() {
#    ping -n 1 -a $1 | grep Pinging | sed 's/Pinging //g' | awk -F " " '{print $2}'
# }
#
# alias iplookups=_iplookups
# _iplookups() {
#    for r in $@
#    do
#       local ip=`iplookup $r`
#     echo "$r $ip"
#    done
# }
#
alias ht='/Users/cpeterson/src/git/github/hilltop/build/install/hilltop/bin/hilltop'
alias ahp='ht project open .&'
alias current_project='basename `git rev-parse --show-toplevel`'

alias new_build='ht build new --wait $(current_project) $(anthill_current_branch)'
alias latest_build='ht build latest $(current_project) $(anthill_current_branch) --json | jq ".id"'
alias latest_success='ht build latest $(current_project) $(anthill_current_branch) success --json | jq ".id"'

alias bl=_bl
_bl() {
   ht build open $1
}
#
# alias fb-new=_fb_new
#   _fb_new() {
#      git pull
#      git checkout -b $1
#      git push -u origin $1
#   }
#   
# alias fb-up=_fb_up
#   _fb_up() {
#     git pull
#     git merge origin/master
#     git mergetool
#     git commit
#   }
#
#
# alias fi?=_fi?
#   _fi?() {
#     local current=`ht workflow-property list $(current_project) FeatureIntegration --json | jq -r '. | select(.name=="FeaturesBranchesForIntegration") | .value'`
#     echo $current
#   }
#
# alias fi+=_fi+
#   _fi+() {
#     local branch=$1
#     if [ -z $branch ]
#     then
#       branch=$(current_branch)
#     fi
#     local current=`fi?`
#     if [[ $current == *$branch* ]]
#     then
#       echo 'Already enlisted'
#       return 0
#     fi
#     local newValue="$current $branch"
#     
#     ht workflow-property set $(current_project) FeatureIntegration FeaturesBranchesForIntegration "$newValue"
#     echo "$newValue"
#   }
#
# alias fi-=_fi-
#   _fi-() {
#     local branch=$1
#     if [ -z $branch ]
#     then
#       branch=$(current_branch)
#     fi
#     local current=`fi?`
#     if [[ $current == *$branch* ]]
#     then
#       local newValue=`echo $current | sed s/$branch//`
#     
#       ht workflow-property set $(current_project) FeatureIntegration FeaturesBranchesForIntegration "$newValue"
#       echo "$newValue"
#     else
#       echo 'Not enlisted'
#       return 1
#     fi
#   }
#
# alias tag-release=_tag-release
#   _tag-release() {
#    ht build show $1 > buildinfo.txt
#    
#    deployed=`cat buildinfo.txt | grep -i 'Deployed to Production'`
#    if [ "$deployed" ]; then
#       stamp=`cat buildinfo.txt | grep -i 'Stamp' | awk -F " " '{print $2}'`
#     echo "Stamp: $stamp"
#     hash=`cat buildinfo.txt | grep -i 'workspace.revision' | awk -F " " '{print $NF}'`
#       echo "Hash: $hash"
#     git tag -a "$stamp" --file buildinfo.txt $hash
#     rm buildinfo.txt
#     git push --tags
#    else
#       echo "Not deployed to production!"
#    fi
#   }
#
alias deploy=_deploy
  _deploy() {
    if [ -z "$1" ]
    then
      echo "Must specify a build life"
      return 1
    fi
    local projectName=`ht build show $1 --json | jq -r '.project'`
    local workflowName='Deploy: Lower Environment'
    local environment=`echo $2 | tr '[:upper:]' '[:lower:]'`
    case $environment in
      candidate)
        environment='Candidate Integration'
        ;;
      test01)
        environment='TEST01'
        ;;
      test03)
        environment='TEST03'
        ;;
      stage)
        workflowName='Deploy: Staging'
        environment=`ht workflow show $projectName "Deploy: Staging" --json | jq -r '.environments | .[]'`
        ;;
      production)
        if [ -z "$3" ]
        then
           echo 'Must specify new features / rollback implications of this build'
           return 3
        fi
        local rollbackBuild=`ht build latest $projectName master 'Deployed to PRODUCTION' --json | jq '.id'`
        local serviceNowMessage="Run 'Deploy: Production' on Build $rollbackBuild\n\nChanges: $3"
        ht build run --wait $1 '1. Initiate RFC to PRODUCTION' OperationalTasksEnv SvcNow_message="$serviceNowMessage"
        open "http://splunk.gettywan.com/en-US/app/gi_appdev_entsvc_web/Release2?form.service=$projectName"
        tag-release $1
        return 0
        ;;
      *)
        echo "Must specify a valid environment, but was '$environment'"
        return 2
    esac
    ht build run --wait $1 "$workflowName" "$environment"
  }

alias hilltop_test=_test
  _test() {
    if [ -z "$1" ]
    then
      echo "Must specify a build life"
      return 1
    fi
    local environment=`echo $2 | tr '[:upper:]' '[:lower:]'`
    case $environment in
      candidate)
        environment='candidate'
        ;;
      test01)
        environment='test01_group'
        ;;
      test03)
        environment='test03_group'
        ;;
      *)
        echo "Must specify a valid environment, but was '$environment'"
        return 2
    esac
    ht build run --wait $1 'Execute Integration Tests' 'ENTSVC Test Runners' "Environment=$environment"
  }

